cd adb_community_detection/

spark-shell --conf spark.neo4j.bolt.password=neoisone --packages neo4j-contrib:neo4j-spark-connector:2.0.0-M2,graphframes:graphframes:0.2.0-spark2.0-s_2.11 --jars ./lib/gs-core-1.3.jar,./lib/gs-algo-1.3.jar,./lib/gs-ui-1.3.jar,./lib/jfreechart-1.0.19-demo.jar,./lib/neo4j-spark-connector-2.0.0-M2.jar

// Facebook Twitter SNAP Network Edge loader
import org.apache.spark.SparkContext._
import org.apache.spark.graphx._
import org.apache.spark.rdd._
import scala.io.Source
import scala.math.abs
import org.graphstream.graph.{Graph => GraphStream}
import org.graphstream.graph.implementations._
import breeze.linalg._
import breeze.linalg.SparseVector

// Creates a SparkSession.
val spark = SparkSession.builder.getOrCreate()
val conf = new SparkConf().setAppName("SNAP Data Viz").setMaster("local").set("spark.driver.memory", "2G"

val sc = new SparkContext(conf)
val sc = spark.sparkContext
// Configure the program

//Configure Dataset Location
val FB_DATA="Dataset/facebook/";
val TW_DATA="Dataset/twitter/";

//Load FacebookCombinedGraph
val FacebookCombinedGraph = GraphLoader.edgeListFile(sc,FB_DATA+"facebook_combined.txt", numEdgePartitions = 16);
println("FacebookCombinedGraph Loaded");

//Load TwitterCombinedGraph
val TwitterCombinedGraph = GraphLoader.edgeListFile(sc,TW_DATA+"twitter_combined.txt", numEdgePartitions = 32);
println("TwitterCombinedGraph Loaded");

//Dataset Exploration
println("Facebook Number of vertices : " + FacebookCombinedGraph.vertices.count());
println("Facebook Number of edges : " + FacebookCombinedGraph.edges.count());

println("Twitter Number of vertices : " + TwitterCombinedGraph.vertices.count());
println("Twitter Number of edges : " + TwitterCombinedGraph.edges.count());


val ranks = FacebookCombinedGraph.pageRank(0.0001).vertices

println("Facebook Triangle counts :" + FacebookCombinedGraph.connectedComponents.triangleCount().vertices.collect().mkString("\n"))
println("Twitter Triangle counts :" + TwitterCombinedGraph.connectedComponents.triangleCount().vertices.collect().mkString("\n"));

//Viz

//FacebookCombinedGraph Visualisation
val fbGraphStream: SingleGraph = new SingleGraph("EgoSocial");
fbGraphStream.addAttribute ("ui.stylesheet","url(file:///home/sbasodi1/workspace/fall_16_adb_project/adb_comm_detection/style/fbGraphStyleSheet)");
fbGraphStream.addAttribute("ui.quality");
fbGraphStream.addAttribute("ui.antialias");
for ((id,_) <- FacebookCombinedGraph.vertices.collect()) {
  val node = fbGraphStream.addNode(id.toString).asInstanceOf[SingleNode]
}

for (Edge(x,y,_) <- FacebookCombinedGraph.edges.collect()) {
  val edge = fbGraphStream.addEdge(x.toString ++ y.toString,
  x.toString, y.toString,
  true).
  asInstanceOf[AbstractEdge]
}
fbGraphStream.display()


//TwitterCombinedGraph Visualisation
val twGraphStream: SingleGraph = new SingleGraph("EgoSocial");
twGraphStream.addAttribute ("ui.stylesheet","url(file:///home/sbasodi1/workspace/fall_16_adb_project/adb_comm_detection/style/twGraphStyleSheet)");
twGraphStream.addAttribute("ui.quality");
twGraphStream.addAttribute("ui.antialias");
for ((id,_) <- TwitterCombinedGraph.vertices.collect()) {
  val node = twGraphStream.addNode(id.toString).asInstanceOf[SingleNode]
}

for (Edge(x,y,_) <- TwitterCombinedGraph.edges.collect()) {
  val edge = twGraphStream.addEdge(x.toString ++ y.toString,
  x.toString, y.toString,
  true).
  asInstanceOf[AbstractEdge]
}
twGraphStream.display()
